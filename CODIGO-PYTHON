import nltk

g2 = """
SS -> A0
A0 ->A1 '?' A1 | A2 '?' A2 | A3 '?' A3 | A1 '-' A1 | A2 '=' A2 | A3 '#' A3
A1 -> A1 '?' A2 | A2 '?' A1 | A2 '?' A3 | A3 '?' A2 | A3 '?' A4 | A4 '?' A3 | A1 '-' A2 | A2 '-' A1 | A2 '=' A3 | A3 '=' A2 | A3 '#' A4 | A4 '#' A3
A2 -> A1 '?'A3 | A3'?'A1 | A2'?'A4 | A4'?'A2 | A3'?'A5 | A5'?'A3 | A1'-'A3 | A3'-'A1 | A2'='A4 | A4'='A2 | A3'#'A5 | A5'#'A3
A3 -> A1'?'A4 | A4'?'A1 | A2'?'A5 | A5'?'A2 | A3'?'A6 | A6'?'A3 | A1'-'A4 | A4'-'A1 | A2'='A5 | A5'='A2 | A3'#'A6 | A6'#'A3
A4 -> A1'?'A5 | A5'?'A1 | A2'?'A6 | A6'?'A2 | A1'-'A5 | A5'-'A1 | A2'='A6 | A6'='A2
A5 -> A1'?'A6 | A6'?'A1 | A1'-'A6 | A6'-'A1
A1 -> '(-'A0')'
A2 -> '(-' A1')' | '(='A0')'
A3 -> '(#'A0')'
A4 -> '(='A2')'
A6 -> '(#'A3')'
A0 -> 'H^{+}' | 'Na^{+}' | 'K^{+}' | 'Al^{3+}' | 'Ca^{2+}' | 'Zn^{2+}' | 'Gd^{3+}' | 'Cl^{-}' | 'Br^{-}' | 'I^{-}'
A1 -> 'H' | 'F' | 'Na' | 'Cl' | 'K' | 'Br' | 'Ag' | 'I' | 'O^{-}' | 'R' | 'Ph' | '*' | '.'
A2 -> 'O' | 'Mg' | 'S' | 'Ca' | 'Zn' | 'Hg' | 'Co^{+}' | 'Pt^{2+}' | 'N^{-}' | 'Pph' | '$' | ':'
A3 -> 'N' | 'Al' | 'P' | 'Co' | 'As' | 'Gd' | 'Bi' | 'S^{+}' | '%' | ';'
A4 -> 'C' | 'Si' | 'S' | 'Ge' | 'Pt' | 'N^{+}'
A5 -> 'P' | 'Sb'
A6 -> 'S' | 'Tc'
"""

grammar2 = nltk.CFG.fromstring(g2)
analizador2 = nltk.ChartParser(grammar2)

oraciones = input("Ingrese la estructura condensada: ").split("\n")

for oracion in oraciones:
    cadena_aceptada = False
    for tree in analizador2.parse(oracion.split()):
        print("Análisis de la estructura para comprobar si es válida:")
        print(tree, "\n")
        cadena_aceptada = True

    if not cadena_aceptada:
        print("La cadena no es aceptada.")
