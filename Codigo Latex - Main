% PLANTILLA APA7
% Creado por: Isaac Palma Medina
% Última actualización: 25/07/2021
% @COPYLEFT

% Fuentes consultadas (todos los derechos reservados):  
% Normas APA. (2019). Guía Normas APA. https://normas-apa.org/wp-content/uploads/Guia-Normas-APA-7ma-edicion.pdf
% Tecnológico de Costa Rica [Richmond]. (2020, 16 abril). LaTeX desde cero con Overleaf (1 de 3) [Vídeo]. YouTube. https://www.youtube.com/watch?v=kM1KvHVuaTY Weiss, D. (2021). 
% Formatting documents in APA style (7th Edition) with the apa7 LATEX class. https://ctan.math.washington.edu/tex-archive/macros/latex/contrib/apa7/apa7.pdf @COPYLEFT

%+-+-+-+-++-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+

% Preámbulo
\documentclass[stu, 12pt, letterpaper, donotrepeattitle, floatsintext, natbib]{apa7}
\usepackage[utf8]{inputenc}
\usepackage{comment}
\usepackage{marvosym}
\usepackage{graphicx}
\usepackage{float}
\usepackage{tikz}
\usepackage{amsmath}
\usepackage[normalem]{ulem}
\usepackage[spanish]{babel} 
\selectlanguage{spanish}
\useunder{\uline}{\ul}{}
\newcommand{\myparagraph}[1]{\paragraph{#1}\mbox{}\\}

% Portada
\thispagestyle{empty}
\title{\Large Autómata finito y gramática libre de contexto aplicada a los elementos químicos (Estructuras condensadas)}
\author{Luyo Valverde Carlos Javier \\Rios Vito Daniela Paola \\Yarrow Larrauri Nicholas} % (autores separados, consultar al docente)
% Manera oficial de colocar los autores:
%\author{Autor(a) I, Autor(a) II, Autor(a) III, Autor(a) X}
\affiliation{Universidad San Ignacio de Loyola}
\course{Código del curso: Teoría de Computación}
\professor{Rodriguez Urquiaga, Roberto Josue}
\duedate{2023}
\begin{document}
\maketitle


% Índices
\pagenumbering{roman}
    % Contenido
\renewcommand\contentsname{\largeÍndice}
\tableofcontents
\setcounter{tocdepth}{2}
\newpage

% Cuerpo
\pagenumbering{arabic}

\section{\large Resumen}
\noindent \maskCitet{}\\
Los autómatas finitos son modelos abstractos utilizados en informática y teoría de la computación para describir el comportamiento de sistemas en términos de procesamiento de símbolos. La definición formal de un autómata finito incluye un conjunto finito de estados (Q), un conjunto finito de símbolos de entrada ('\textit{sigma}'), una función de transición (\textit{'delta'}) que determina cómo el autómata cambia de estado dado un símbolo de entrada, un estado inicial (q0), y un conjunto de estados finales (F).
\\
Las Gramáticas Libres de Contexto (GLC) son esenciales en la teoría de la computación y se utilizan para describir lenguajes formales. Una GLC se representa por una tupla que incluye un conjunto finito de variables no terminales (V), un conjunto finito de símbolos terminales o el alfabeto del lenguaje ('\textit{sigma}'), un conjunto finito de reglas de producción (P) que especifica cómo combinar los símbolos para formar cadenas válidas, y un símbolo inicial (S).
\\
Las estructuras condensadas son una forma abreviada de representar fórmulas químicas, especialmente en química orgánica. Se utilizan secuencias de caracteres para representar la disposición de átomos en una molécula de manera más compacta que la fórmula estructural completa. Estas estructuras siguen una gramática libre de contexto que define la sintaxis de las cadenas desplegadas.
\\
El estudio propuesto tiene como objetivo principal desarrollar un marco teórico y computacional que integre conceptos de autómatas finitos y gramáticas libres de contexto para analizar estructuras condensadas. Los objetivos secundarios incluyen definir reglas gramaticales específicas, desarrollar un programa en Python y validar la sintaxis de las estructuras condensadas. La metodología se basará en una revisión exhaustiva de la literatura académica, con la recopilación y análisis de datos a través de fuentes confiables. El enfoque será teórico, centrándose en la comprensión conceptual y la aplicación práctica de los conceptos mencionados.
\newpage

\section{\large Agradecimiento}
\noindent \maskCitet{}\\
A nuestro grupo nos gustaría expresar nuestro más sincero agradecimiento al Profesor Roberto Rodriguez por su apoyo y orientación excepcionales a lo largo de la realización de este trabajo durante el ciclo. Su experiencia y conocimiento nos han enriquecido enormemente a nuestra comprensión y habilidades en esta área. Además, su disposición para responder a nuestras preguntas, su paciencia y su compromiso con el crecimiento tanto académico como personal son dignos de elogio. Siempre se mostró dispuesto a discutir ideas y proporcionar una perspectiva diferente.  
\\
Nos sentimos afortunados de aprender y crecer bajo la tutela de nuestro profesor Roberto Rodriguez. Este trabajo no habría sido posible sin su influencia positiva, y estamos profundamente agradecidos por su contribución a nuestra formación académica. Gracias, profesor por su generosidad y apoyo constante.
\newpage

\section{\large Introducción}
\noindent \maskCitet{}\\
Los autómatas finitos son modelos computacionales que realizan procesos para entregar una salida tras recibir una entrada y está definido por un alfabeto, conjunto de estados finitos, transiciones, un estado inicial y un estado final. Por otro lado, las gramáticas libres de contexto es una gramática formal y resulta útil en diversas aplicaciones debido a que pueden describir características con estructuras recursivas.
\\
Ambos cuentan con múltiples aplicaciones que se encuentran habitualmente en nuestra vida cotidiana. Se aplica cuando se quiere conocer la ruta más corta a un destino, al jugar un videojuego, en la biología, redes de comunicación, etc. En este sentido, el presente trabajo relaciona los autómatas finitos y las gramáticas libres de contexto aplicada a los compuestos químicos, específicamente, en su estructura condensada.
\\
En el campo de la química se encuentran los muy bien conocidos “compuestos químicos”, cada uno de los cuales pueden estar presentadas con distintas formulas estructuras. Entre estas encontramos a las fórmulas condensadas, semidesarrolladas y desarrolladas. Para el presente proyecto se hará uso de la fórmula condensada o también conocida como molecular que indica la proporción de átomos de un compuesto. 
\\
En este proyecto no se pretende abarcar profundamente cómo se establecen las estructuras condensadas, por lo que se obtendrán los datos de fuentes externas. Lo que se busca es hacer más fácil y práctico para un estudiante de química, o cualquier otra persona interesada, conocer y analizar un compuesto químico a través de su fórmula condensada y corroborar que los enlaces se hayan realizado correctamente.

\newpage

\section{\large Marco Teórico}
\noindent \maskCitet{}\\


\subsection{\textbf{Autómatas Finitos}}
Los autómatas finitos son máquinas abstractas, es decir, modelos teóricos y conceptuales utilizados en la informática y la teoría de la computación para describir el comportamiento de sistemas en términos de procesamiento de símbolos \cite{Brookshear1993}
). La definición formal de un autómata finito es una tupla $(Q, \Sigma, \delta, q_0, F)$, donde: 
\begin{itemize}
\item $Q$: Un conjunto finito de estados.
\item $\Sigma$: Un conjunto finito de símbolos, llamado alfabeto de entrada.
\item $\delta$: Una función de transición: $\delta: Q \times \Sigma \to Q$.
\item $q_0$: El estado inicial.
\item $F$: Un conjunto de estados finales.
\end{itemize}

Por ejemplo, consideremos un autómata que acepta el lenguaje de cadenas binarias que terminan con "01". Los componentes de este autómata son:
\begin{align*}
Q &= \{q_0, q_1, q_2\} \\
\Sigma &= \{0, 1\} \\
\delta &= \{(q_0, 0) \to q_0, (q_0, 1) \to q_1, (q_1, 0) \to q_0, (q_1, 1) \to q_2, (q_2, 0) \to q_0, (q_2, 1) \to q_1\} \\
q_0 &= q_0 \\
F &= \{q_1\}
\end{align*}

Además, los autómatas finitos pueden ser clasificados de 2 formas: autómatas finitos deterministas (AFD) y autómatas finitos no deterministas (AFND).

Los AFD poseen una transacción única establecida por cada par de estados y símbolos dentro de su alfabeto. En otras palabras, dado un estado y un símbolo, el autómata tendra la capacidad de saber a que estado específico debe transaccionar.
En cambio, los AFND tienen la flexibilidad de poseer múltiples cantidad de  transacciones posibles desde un estado dado cierto símbolo de entrada. Dando consigo la posibilidad de poder estar en varios estados al mismo tiempo(.
\subsection{\textbf{Gramáticas Libres de Contexto}}
Las Gramáticas Libres de Contexto (GLC) son una parte esencial en la teoría de la computación. Se utilizan para describir y definir lenguajes formales. Similar a los autómatas, una GLC puede ser representada por una tupla: \[ G = (V, \Sigma, P, S) \]
Donde:
\begin{itemize}
\item $V$: Un conjunto finito de variables o símbolos no terminales.
\item $\Sigma$: Un conjunto finito de símbolos terminales o el alfabeto del lenguaje.
\item $P$: Es un conjunto finito de reglas de producción que especifican cómo se pueden combinar los símbolos no terminales y terminales para formar cadenas o secuencias válidas en el lenguaje.de $A \rightarrow \alpha$, donde $A$ es una variable y $\alpha$ es una cadena de símbolos terminales y no terminales.
\item $S$: El símbolo inicial que pertenece a $V$, representa el punto de inicio para generar las cadenas del lenguaje.
\end{itemize}
La siguiente es una Gramática Libre de Contexto (GLC) que genera el lenguaje de todas las cadenas que consisten en una secuencia de 'a's seguida de una secuencia de 'b's:

\[
G = (\{S\}, \{a, b\}, P, S)
\]
Donde:
\begin{itemize}
\item \(\{S\}\) es el conjunto de variables o símbolos no terminales. En este caso, solo tenemos una variable, \(S\).
\item \(\{a, b\}\) es el conjunto de símbolos terminales o el alfabeto del lenguaje. Aquí, tenemos dos símbolos terminales, "a" y "b".
\item \(P\) es el conjunto de reglas de producción que especifican cómo se pueden combinar los símbolos no terminales y terminales. En este caso, las reglas son:
\end{itemize}

  \[
  \begin{align*}
  S &\rightarrow aS \\
  S &\rightarrow bS \\
  S &\rightarrow \varepsilon
  \end{align*}
  \]
  Estas reglas indican que podemos generar una cadena comenzando con \(S\) y reemplazando \(S\) por 'aS' o 'bS' repetidamente, o simplemente dejar \(S\) como \(\varepsilon\) (cadena vacía).
\begin{itemize}
\item \(S\) es el símbolo inicial que representa el punto de inicio para generar las cadenas del lenguaje.
\end{itemize}
Con esta GLC, se pueden generar cadenas como 'aabb', 'aaabbb', 'ab', 'aabbb', etc., que consisten en secuencias de 'a's seguidas de secuencias de 'b'

\subsection{\textbf{Estructuras condensadas}}
Una estructura condensada es una forma abreviada de representar la fórmula química de un compuesto. En el contexto de la química orgánica, una estructura condensada consiste en una secuencia de caracteres que representa la disposición de los átomos en una molécula de una manera más compacta que la fórmula estructural completa. Un ejemplo es  la secuencia ?C?H=C?H?H que representa una estructura condensada en la que el caracter H indica la conexión con la parte principal de la fórmula estructural, C  y H representan los átomos de carbono e hidrógeno respectivamente, = indica un enlace doble, y ? se utiliza para indicar un tipo de enlace desconocido. Esta representación condensada proporciona información sobre la composición y la conectividad de los átomos en la molécula de una manera más simplificada. \\
Las estructuras condensadas definen la sintaxis de una cadena desplegada y está en forma de una gramática libre de contexto para facilitar su manejo. El símbolo de inicio es "SS". A0, A1, A2, A3, A4, A5 y A6 son símbolos no terminales, y las cadenas de caracteres encerradas entre comillas dobles, como "H", "Tos", "?", "=", "(", y ")", son símbolos terminales.

Algunas reglas gramaticales se definen según la valencia de cada átomo. La valencia de un átomo es el número de enlaces que puede compartir con otros átomos, a menudo llamado \textbf{el número de manos} de un átomo. Un subíndice de un símbolo no terminal representa el número de manos disponibles para unirse a otros átomos. Por ejemplo, el número de manos del hidrógeno H es uno, y existe la regla A1 → "H\\

\newpage

\section{\large Trabajos Relacionados}
\noindent \maskCitet{Fumiyasu}\\
\subparagraph{Recognition of Condensed Structural Formulas of Chemical Compounds Using a Formal Grammar}
En este artículo, se propone un método para reconocer fórmulas estructurales condensadas de compuestos químicos utilizando una gramática formal.\\
\noindent \maskCitet{Matyszczak2019}\\
\subparagraph{Grammars of Organic Chemistry}
Se propone y discute el alfabeto del lenguaje de todos los compuestos orgánicos, además, se presenta un sistema de notación que permite escribir determinado compuesto orgánico como una cadena. Se construyen autómatas deterministas de estados finitos para decidir si el compuesto orgánico puede ser sintetizado en la reacción de esterificación.\\
\noindent \maskCitet{Yoshikawa2018}\\
\subparagraph{Population-based De Novo Molecule Generation, Using Grammatical Evolution}
En este trabajo, se propone un nuevo generador de moléculas eficiente (ChemGE) para generar múltiples moléculas novedosas aprovechando la computación paralela. ChemGE usa un enfoque de evolución gramatical que es una técnica de optimización basada en poblaciones para optimizar una población de cadenas que siguen una gramática libre de contexto.\\
\noindent \maskCitet{Qura-Tul-Ein2014}\\
\subparagraph{DNA Pattern Analysis using Finite Automata}
Este artículo utiliza NFA y DFA para analizar el patrón de ADN. El ácido desoxirribonucleico (ADN) está presente en todos los organismos vivos. Hay ciertas secuencias en el ADN que afectan ciertas funciones y cualquier cambio en la secuencia puede cambiar la funcionalidad, lo que puede causar anormalidades en el organismo.\\
\noindent \maskCitet{Hayashida2018}\\
\subparagraph{Grammar-based Compression for Directed and Undirected Generalized Series-parallel Graphs using Integer Linear Programming}
Se aborda el problema de encontrar reglas de generación a partir de datos biológicos, representados como gráficos en series paralelas generalizadas (GSPG) dirigidos y no dirigidos, que incluyen árboles, gráficos planos externos y gráficos en series paralelas. En este estudio, se propone gramáticas que representan GSPG con etiquetas de borde basadas en gramáticas libres de contexto.\\

\newpage

\section{\large Metodología}
\noindent \maskCitet{}\\

\subsection{\textbf{Objetivos}}
\noindent \maskCitet{}\\
\subsection{\textit{Objetivo principal}} 
El objetivo principal de este estudio es desarrollar un marco teórico y computacional que integre conceptos de autómatas finitos, y la programación de gramáticas libres de contexto para analizar estructuras condensadas. El enfoque se centrará en facilitar la interpretación y relación entre estos elementos.
\subsection{\textit{Objetivos secundarios}}
\begin{itemize}
\item Definir reglas gramaticales específicas para las estructuras condensadas.
\item Desarrollar un programa de gramáticas aplicadas a las fórmulas moleculares en Python.
\item Validar la sintaxis de las estructuras condensadas.
\end{itemize}

\subsection{\textbf{Diseño del estudio}}

La metodología de investigación se sustentará en una exhaustiva revisión de la literatura académica, libros de referencia y recursos en línea de reconocida confiabilidad. Para ello, se emplearán herramientas de búsqueda académica de vanguardia y se accederá a bases de datos especializadas en informática y teoría de la computación, permitiendo así un análisis completo y actualizado de los avances en los campos pertinentes. \\
 El enfoque será teórico, centrándose en la comprensión conceptual y la aplicación práctica de autómatas finitos y gramáticas libres de contexto.


\subsection{\textbf{Recopilación de datos}}
Los datos necesarios para el estudio se recopilarán a través de la revisión de literatura académica, libros de referencia, y recursos en línea confiables. Se prestará especial atención a fuentes como libros de texto de teoría de la computación, artículos académicos y sitios web de instituciones educativas reconocidas.
\\
Revisando las diversas fuentes en Internet, se propuso hacer uso de la página \cite{Fumiyasu}, donde se presenta de manera clara, ordenada y concisa la explicacion de las estructuras condensadas.


\subsection{\textbf{Análisis de datos}}
Los datos recopilados se analizarán mediante la identificación de patrones, ejemplos y aplicaciones prácticas de autómatas finitos y gramáticas libres de contexto. Se prestará especial atención a la comprensión de la relación entre estos conceptos y su relevancia en la teoría de la computación y la informática.
\\
A continuación se presenta una tabla de como se arma una estructura condensada paso por paso.

\begin{figure}[h]
\caption{Reconocimiento de fórmulas estructurales condensadas}
\centering
\includegraphics[width=1.0\textwidth]{Formulas estructuras condensadas.JPG}
\end{figure}
\newpage
Para entender mejor las estructuras condensadas, consideremos el siguiente ejemplo:
    \subsection*{Ejemplo 1: Formula estructural del hidrógeno}
    \includegraphics[width=1.0\textwidth]{Formula Estructural.JPG}
    El ejemplo de la cadena desplegada "*?C?H=C?H?H" se analiza utilizando la gramática, generando una secuencia de producciones que derivan la cadena dada desde el símbolo de inicio "SS". Se muestra un árbol de análisis (parse tree) y la fórmula estructural completa correspondiente.
\newpage

\section{\large Resultados}
\noindent \maskCitet{}\\
Para la programación en Phyton, primero se importa el módulo "nltk". Luego se define una cadena de texto para guardar la gramática: \\
\includegraphics[width=0.8\textwidth]{1.png}
\\ Se crea un analizador y se establecen funciones para solicitar ingresar una estructura condensada. Seguidamente se analiza si la cadena cumple la gramática definida, si es así se muestran los recorridos; caso contrario, se muestra un mensaje de "cadena no aceptada".\\
\includegraphics[width=0.8\textwidth]{2.png}
\\Para ingresar los datos, la fórmula condensada debe ser desplegada previamente y separada con ?. Por ejemplo, para la sustancia Etano se ingresa: C ? C ? H ? H ? H ? H ? H ? H. Si la cadena es aceptada, se muestra su análisis como en la siguiente imagen: \\
\includegraphics[width=0.8\textwidth]{aceptada.png}
\\ Por otro lado, si no se reconoce la estructura condensada, se muestra el mensaje "la cadena no es aceptada": \\
\includegraphics[width=0.8\textwidth]{no_aceptada.png}
\\ 
\newpage
\section{\large Conclusiones}
\noindent \maskCitet{}\\
\begin{itemize}
\item \textbf{Integración de conceptos teóricos y aplicaciones prácticas:} El trabajo logra integrar de manera eficaz conceptos teóricos fundamentales de la teoría de la computación mencionados en el marco teórico, con aplicaciones prácticas en el análisis de estructuras condensadas de diversos compuestos químicos. La combinación de los conceptos permite desarrollar una herramienta eficaz para la validación y análisis de estructuras condensadas, con potencial impacto en la simplificación y comprensión de fórmulas moleculares, especialmente para estudiantes de química.

\item \textbf{Aplicación a la Química:} La elección de aplicar los conceptos teóricos a la representación de compuestos químicos mediante estructuras condensadas es relevante y tiene un impacto potencial en la simplificación y comprensión de fórmulas moleculares. Las estructuras condensadas son un tipo de representación de fórmulas moleculares que utilizan símbolos y abreviaturas para representar los elementos y grupos funcionales de un compuesto químico. La simplificación de las fórmulas moleculares mediante estructuras condensadas puede facilitar su comprensión, especialmente para estudiantes de química que están aprendiendo los conceptos básicos de la química orgánica.

\item \textbf{Desarrollo de un programa funcional:} La implementación en Python demuestra la viabilidad de utilizar autómatas finitos y gramáticas libres de contexto para validar y analizar estructuras condensadas. La programación permite la interacción y verificación de la sintaxis de las fórmulas moleculares, lo que facilita la detección de errores y la corrección de los mismos.

\item \textbf{Validación de estructuras condensadas:} La capacidad del programa para validar si una cadena cumple con la gramática definida proporciona una herramienta útil para verificar la corrección sintáctica de las estructuras condensadas de compuestos químicos. La validación sintáctica es un paso importante en el análisis de estructuras condensadas, ya que garantiza que las fórmulas moleculares sean correctas y estén bien formadas.

\end{itemize}

\newpage

% Referencias
\renewcommand\refname{\large\textbf{Referencias}}
\bibliography{mibibliografia}


\end{document}
